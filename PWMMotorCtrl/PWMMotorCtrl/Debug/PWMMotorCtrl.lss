
PWMMotorCtrl.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000092  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000e6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000118  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  00000154  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000493  00000000  00000000  00000194  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000003bc  00000000  00000000  00000627  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002c4  00000000  00000000  000009e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000064  00000000  00000000  00000ca8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000329  00000000  00000000  00000d0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000002a  00000000  00000000  00001035  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  0000105f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	09 c0       	rjmp	.+18     	; 0x14 <__ctors_end>
   2:	0e c0       	rjmp	.+28     	; 0x20 <__bad_interrupt>
   4:	0d c0       	rjmp	.+26     	; 0x20 <__bad_interrupt>
   6:	0c c0       	rjmp	.+24     	; 0x20 <__bad_interrupt>
   8:	0b c0       	rjmp	.+22     	; 0x20 <__bad_interrupt>
   a:	0a c0       	rjmp	.+20     	; 0x20 <__bad_interrupt>
   c:	09 c0       	rjmp	.+18     	; 0x20 <__bad_interrupt>
   e:	08 c0       	rjmp	.+16     	; 0x20 <__bad_interrupt>
  10:	07 c0       	rjmp	.+14     	; 0x20 <__bad_interrupt>
  12:	06 c0       	rjmp	.+12     	; 0x20 <__bad_interrupt>

00000014 <__ctors_end>:
  14:	11 24       	eor	r1, r1
  16:	1f be       	out	0x3f, r1	; 63
  18:	cf e9       	ldi	r28, 0x9F	; 159
  1a:	cd bf       	out	0x3d, r28	; 61
  1c:	1f d0       	rcall	.+62     	; 0x5c <main>
  1e:	37 c0       	rjmp	.+110    	; 0x8e <_exit>

00000020 <__bad_interrupt>:
  20:	ef cf       	rjmp	.-34     	; 0x0 <__vectors>

00000022 <_Z8portInitv>:
#define BtnUp		PINB2
#define MotPWM		OCR0A

void portInit(void)
{
	DDRB = 0b00000001;
  22:	81 e0       	ldi	r24, 0x01	; 1
  24:	87 bb       	out	0x17, r24	; 23
	PORTB =0b00000110;
  26:	86 e0       	ldi	r24, 0x06	; 6
  28:	88 bb       	out	0x18, r24	; 24
  2a:	08 95       	ret

0000002c <_Z7pwmInitv>:
}

void pwmInit(void)
{
	TCCR0A = 0b10000011; //FastPWM non invert OCR0A enabled
  2c:	83 e8       	ldi	r24, 0x83	; 131
  2e:	8f bd       	out	0x2f, r24	; 47
	TCCR0B = 0b00000011;	// PWM 9600000/256/64
  30:	83 e0       	ldi	r24, 0x03	; 3
  32:	83 bf       	out	0x33, r24	; 51
	TCNT0 = 255;
  34:	8f ef       	ldi	r24, 0xFF	; 255
  36:	82 bf       	out	0x32, r24	; 50
	OCR0A = 0;
  38:	16 be       	out	0x36, r1	; 54
  3a:	08 95       	ret

0000003c <_Z6wdt_Onv>:
}

void wdt_On(void)
{
	wdt_reset();
  3c:	a8 95       	wdr
	WDTCR |= (1<<WDCE) | (1<<WDE);
  3e:	81 b5       	in	r24, 0x21	; 33
  40:	88 61       	ori	r24, 0x18	; 24
  42:	81 bd       	out	0x21, r24	; 33
	WDTCR = (1<<WDE) | (1<<WDP2) | (1<<WDP1); // WDT prescaler (time-out) 1s
  44:	8e e0       	ldi	r24, 0x0E	; 14
  46:	81 bd       	out	0x21, r24	; 33
  48:	08 95       	ret

0000004a <_Z7wdt_Offv>:
}

void wdt_Off(void)
{
	wdt_reset();
  4a:	a8 95       	wdr
	MCUSR &= ~(1<<WDRF);	
  4c:	84 b7       	in	r24, 0x34	; 52
  4e:	87 7f       	andi	r24, 0xF7	; 247
  50:	84 bf       	out	0x34, r24	; 52
	WDTCR |= (1<<WDCE) | (1<<WDE);
  52:	81 b5       	in	r24, 0x21	; 33
  54:	88 61       	ori	r24, 0x18	; 24
  56:	81 bd       	out	0x21, r24	; 33
	WDTCR = 0;
  58:	11 bc       	out	0x21, r1	; 33
  5a:	08 95       	ret

0000005c <main>:
}

int main(void)
{
	wdt_Off();
  5c:	f6 df       	rcall	.-20     	; 0x4a <_Z7wdt_Offv>
	uint8_t Motlvl = 0;
	portInit();
  5e:	e1 df       	rcall	.-62     	; 0x22 <_Z8portInitv>
	pwmInit();
  60:	e5 df       	rcall	.-54     	; 0x2c <_Z7pwmInitv>
	wdt_On();
  62:	ec df       	rcall	.-40     	; 0x3c <_Z6wdt_Onv>
}

int main(void)
{
	wdt_Off();
	uint8_t Motlvl = 0;
  64:	80 e0       	ldi	r24, 0x00	; 0
	pwmInit();
	wdt_On();
   
    while (1) 
    {
		if (~PINB & (1<<BtnDwn)) Motlvl--;
  66:	b1 9b       	sbis	0x16, 1	; 22
  68:	81 50       	subi	r24, 0x01	; 1
		if (~PINB & (1<<BtnUp)) Motlvl++;
  6a:	b2 9b       	sbis	0x16, 2	; 22
  6c:	8f 5f       	subi	r24, 0xFF	; 255
		if (Motlvl>=255) Motlvl = 254;
  6e:	8f 3f       	cpi	r24, 0xFF	; 255
  70:	21 f0       	breq	.+8      	; 0x7a <main+0x1e>
		if (Motlvl <=0) Motlvl = 1;
  72:	81 11       	cpse	r24, r1
  74:	03 c0       	rjmp	.+6      	; 0x7c <main+0x20>
  76:	81 e0       	ldi	r24, 0x01	; 1
  78:	01 c0       	rjmp	.+2      	; 0x7c <main+0x20>
   
    while (1) 
    {
		if (~PINB & (1<<BtnDwn)) Motlvl--;
		if (~PINB & (1<<BtnUp)) Motlvl++;
		if (Motlvl>=255) Motlvl = 254;
  7a:	8e ef       	ldi	r24, 0xFE	; 254
		if (Motlvl <=0) Motlvl = 1;
		MotPWM = Motlvl;
  7c:	86 bf       	out	0x36, r24	; 54
		wdt_reset();
  7e:	a8 95       	wdr
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  80:	ef e5       	ldi	r30, 0x5F	; 95
  82:	f9 e0       	ldi	r31, 0x09	; 9
  84:	31 97       	sbiw	r30, 0x01	; 1
  86:	f1 f7       	brne	.-4      	; 0x84 <main+0x28>
  88:	00 c0       	rjmp	.+0      	; 0x8a <main+0x2e>
  8a:	00 00       	nop
  8c:	ec cf       	rjmp	.-40     	; 0x66 <main+0xa>

0000008e <_exit>:
  8e:	f8 94       	cli

00000090 <__stop_program>:
  90:	ff cf       	rjmp	.-2      	; 0x90 <__stop_program>
