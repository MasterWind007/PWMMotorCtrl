
PWMMotorCtrl.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000a8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000fc  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000012c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  00000168  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000004ef  00000000  00000000  000001b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000003e8  00000000  00000000  000006a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000031a  00000000  00000000  00000a8f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000084  00000000  00000000  00000dac  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000351  00000000  00000000  00000e30  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000054  00000000  00000000  00001181  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  000011d5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	09 c0       	rjmp	.+18     	; 0x14 <__ctors_end>
   2:	0e c0       	rjmp	.+28     	; 0x20 <__bad_interrupt>
   4:	0d c0       	rjmp	.+26     	; 0x20 <__bad_interrupt>
   6:	0c c0       	rjmp	.+24     	; 0x20 <__bad_interrupt>
   8:	0b c0       	rjmp	.+22     	; 0x20 <__bad_interrupt>
   a:	0a c0       	rjmp	.+20     	; 0x20 <__bad_interrupt>
   c:	09 c0       	rjmp	.+18     	; 0x20 <__bad_interrupt>
   e:	08 c0       	rjmp	.+16     	; 0x20 <__bad_interrupt>
  10:	07 c0       	rjmp	.+14     	; 0x20 <__bad_interrupt>
  12:	06 c0       	rjmp	.+12     	; 0x20 <__bad_interrupt>

00000014 <__ctors_end>:
  14:	11 24       	eor	r1, r1
  16:	1f be       	out	0x3f, r1	; 63
  18:	cf e9       	ldi	r28, 0x9F	; 159
  1a:	cd bf       	out	0x3d, r28	; 61
  1c:	27 d0       	rcall	.+78     	; 0x6c <main>
  1e:	42 c0       	rjmp	.+132    	; 0xa4 <_exit>

00000020 <__bad_interrupt>:
  20:	ef cf       	rjmp	.-34     	; 0x0 <__vectors>

00000022 <_Z8portInitv>:
#define Jp1			PINB4 //jumper to ADC Enabled on board
#define MotPWM		OCR0A 

void portInit(void)
{
	DDRB = 0b00000001;
  22:	81 e0       	ldi	r24, 0x01	; 1
  24:	87 bb       	out	0x17, r24	; 23
	PORTB =0b00010110;
  26:	86 e1       	ldi	r24, 0x16	; 22
  28:	88 bb       	out	0x18, r24	; 24
  2a:	08 95       	ret

0000002c <_Z7adcInitv>:
}

void adcInit(void)
{
	ADCSRA = 0b11000111; //Enabled, StartConversion, F_CPU/128  
  2c:	87 ec       	ldi	r24, 0xC7	; 199
  2e:	86 b9       	out	0x06, r24	; 6
	ADMUX  = 0b01100011; // AREF-internal, ADLAR-Right, input-ADC3
  30:	83 e6       	ldi	r24, 0x63	; 99
  32:	87 b9       	out	0x07, r24	; 7
  34:	08 95       	ret

00000036 <_Z7pwmInitv>:
}

void pwmInit(void)
{
	TCCR0A = 0b10000011; //FastPWM non invert OCR0A enabled
  36:	83 e8       	ldi	r24, 0x83	; 131
  38:	8f bd       	out	0x2f, r24	; 47
	TCCR0B = 0b00000011; //PWM frequency  F_CPU/256/64
  3a:	83 e0       	ldi	r24, 0x03	; 3
  3c:	83 bf       	out	0x33, r24	; 51
	TCNT0 = 255;
  3e:	8f ef       	ldi	r24, 0xFF	; 255
  40:	82 bf       	out	0x32, r24	; 50
	OCR0A = 0;
  42:	16 be       	out	0x36, r1	; 54
  44:	08 95       	ret

00000046 <_Z7adcReadv>:
}

uint8_t adcRead(void)
{
	uint8_t adc = 0;
	ADCSRA |= (1 << ADSC);
  46:	36 9a       	sbi	0x06, 6	; 6
	adc = ADCH;
  48:	85 b1       	in	r24, 0x05	; 5
	return adc;
} 
  4a:	08 95       	ret

0000004c <_Z6wdt_Onv>:
void wdt_On(void)
{
	wdt_reset();
  4c:	a8 95       	wdr
	WDTCR |= (1<<WDCE) | (1<<WDE); //WDT Change Enabled, WDT enabled
  4e:	81 b5       	in	r24, 0x21	; 33
  50:	88 61       	ori	r24, 0x18	; 24
  52:	81 bd       	out	0x21, r24	; 33
	WDTCR = (1<<WDE) | (1<<WDP2) | (1<<WDP1); // WDT prescaler (time-out) 1s
  54:	8e e0       	ldi	r24, 0x0E	; 14
  56:	81 bd       	out	0x21, r24	; 33
  58:	08 95       	ret

0000005a <_Z7wdt_Offv>:
}

void wdt_Off(void)
{
	wdt_reset();
  5a:	a8 95       	wdr
	MCUSR &= ~(1<<WDRF);	
  5c:	84 b7       	in	r24, 0x34	; 52
  5e:	87 7f       	andi	r24, 0xF7	; 247
  60:	84 bf       	out	0x34, r24	; 52
	WDTCR |= (1<<WDCE) | (1<<WDE);
  62:	81 b5       	in	r24, 0x21	; 33
  64:	88 61       	ori	r24, 0x18	; 24
  66:	81 bd       	out	0x21, r24	; 33
	WDTCR = 0;
  68:	11 bc       	out	0x21, r1	; 33
  6a:	08 95       	ret

0000006c <main>:
}

int main(void)
{
	wdt_Off();
  6c:	f6 df       	rcall	.-20     	; 0x5a <_Z7wdt_Offv>
	uint8_t Motlvl = 0;
	portInit();
  6e:	d9 df       	rcall	.-78     	; 0x22 <_Z8portInitv>
	pwmInit();
  70:	e2 df       	rcall	.-60     	; 0x36 <_Z7pwmInitv>
	wdt_On();
  72:	ec df       	rcall	.-40     	; 0x4c <_Z6wdt_Onv>
    adcInit();
  74:	db df       	rcall	.-74     	; 0x2c <_Z7adcInitv>
}

int main(void)
{
	wdt_Off();
	uint8_t Motlvl = 0;
  76:	80 e0       	ldi	r24, 0x00	; 0
	pwmInit();
	wdt_On();
    adcInit();
	while (1) 
    {
		if (~PINB & (1<<Jp1)) Motlvl = adcRead(); 
  78:	b4 9b       	sbis	0x16, 4	; 22
  7a:	e5 df       	rcall	.-54     	; 0x46 <_Z7adcReadv>
		if (~PINB & (1<<BtnDwn)) Motlvl--;
  7c:	b1 9b       	sbis	0x16, 1	; 22
  7e:	81 50       	subi	r24, 0x01	; 1
		if (~PINB & (1<<BtnUp)) Motlvl++;
  80:	b2 9b       	sbis	0x16, 2	; 22
  82:	8f 5f       	subi	r24, 0xFF	; 255
		if (Motlvl>=254) Motlvl = 255;
  84:	8e 3f       	cpi	r24, 0xFE	; 254
  86:	20 f4       	brcc	.+8      	; 0x90 <main+0x24>
		if (Motlvl <=0) Motlvl = 1;
  88:	81 11       	cpse	r24, r1
  8a:	03 c0       	rjmp	.+6      	; 0x92 <main+0x26>
  8c:	81 e0       	ldi	r24, 0x01	; 1
  8e:	01 c0       	rjmp	.+2      	; 0x92 <main+0x26>
	while (1) 
    {
		if (~PINB & (1<<Jp1)) Motlvl = adcRead(); 
		if (~PINB & (1<<BtnDwn)) Motlvl--;
		if (~PINB & (1<<BtnUp)) Motlvl++;
		if (Motlvl>=254) Motlvl = 255;
  90:	8f ef       	ldi	r24, 0xFF	; 255
		if (Motlvl <=0) Motlvl = 1;
		MotPWM = Motlvl;
  92:	86 bf       	out	0x36, r24	; 54
		wdt_reset();
  94:	a8 95       	wdr
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  96:	ef e5       	ldi	r30, 0x5F	; 95
  98:	f9 e0       	ldi	r31, 0x09	; 9
  9a:	31 97       	sbiw	r30, 0x01	; 1
  9c:	f1 f7       	brne	.-4      	; 0x9a <main+0x2e>
  9e:	00 c0       	rjmp	.+0      	; 0xa0 <__stack+0x1>
  a0:	00 00       	nop
  a2:	ea cf       	rjmp	.-44     	; 0x78 <main+0xc>

000000a4 <_exit>:
  a4:	f8 94       	cli

000000a6 <__stop_program>:
  a6:	ff cf       	rjmp	.-2      	; 0xa6 <__stop_program>
