
PWMMotorCtrl.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ce  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000122  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000122  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000154  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  00000190  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000045d  00000000  00000000  000001e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000370  00000000  00000000  00000645  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002e6  00000000  00000000  000009b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a4  00000000  00000000  00000c9c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000030a  00000000  00000000  00000d40  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000005b  00000000  00000000  0000104a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  000010a5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	09 c0       	rjmp	.+18     	; 0x14 <__ctors_end>
   2:	0e c0       	rjmp	.+28     	; 0x20 <__bad_interrupt>
   4:	0d c0       	rjmp	.+26     	; 0x20 <__bad_interrupt>
   6:	22 c0       	rjmp	.+68     	; 0x4c <__vector_3>
   8:	0b c0       	rjmp	.+22     	; 0x20 <__bad_interrupt>
   a:	0a c0       	rjmp	.+20     	; 0x20 <__bad_interrupt>
   c:	09 c0       	rjmp	.+18     	; 0x20 <__bad_interrupt>
   e:	08 c0       	rjmp	.+16     	; 0x20 <__bad_interrupt>
  10:	07 c0       	rjmp	.+14     	; 0x20 <__bad_interrupt>
  12:	06 c0       	rjmp	.+12     	; 0x20 <__bad_interrupt>

00000014 <__ctors_end>:
  14:	11 24       	eor	r1, r1
  16:	1f be       	out	0x3f, r1	; 63
  18:	cf e9       	ldi	r28, 0x9F	; 159
  1a:	cd bf       	out	0x3d, r28	; 61
  1c:	40 d0       	rcall	.+128    	; 0x9e <main>
  1e:	55 c0       	rjmp	.+170    	; 0xca <_exit>

00000020 <__bad_interrupt>:
  20:	ef cf       	rjmp	.-34     	; 0x0 <__vectors>

00000022 <_Z8portInitv>:
#define Jp1			PINB4 //jumper to ADC Enabled on board
#define MotPWM		OCR0A 

void portInit(void)
{
	DDRB = 0b00000001;
  22:	81 e0       	ldi	r24, 0x01	; 1
  24:	87 bb       	out	0x17, r24	; 23
	PORTB =0b00010110;
  26:	86 e1       	ldi	r24, 0x16	; 22
  28:	88 bb       	out	0x18, r24	; 24
  2a:	08 95       	ret

0000002c <_Z7adcInitv>:
}

void adcInit(void)
{
	ADCSRA = 0b11000111; //Enabled, StartConversion, F_CPU/128  
  2c:	87 ec       	ldi	r24, 0xC7	; 199
  2e:	86 b9       	out	0x06, r24	; 6
	ADMUX  = 0b01100011; // AREF-internal, ADLAR-Right, input-ADC3
  30:	83 e6       	ldi	r24, 0x63	; 99
  32:	87 b9       	out	0x07, r24	; 7
  34:	08 95       	ret

00000036 <_Z7pwmInitv>:
}

void pwmInit(void)
{
	TCCR0A = 0b10000011; //FastPWM non invert OCR0A enabled
  36:	83 e8       	ldi	r24, 0x83	; 131
  38:	8f bd       	out	0x2f, r24	; 47
	TCCR0B = 0b00000011; //PWM frequency  F_CPU/256/64
  3a:	83 e0       	ldi	r24, 0x03	; 3
  3c:	83 bf       	out	0x33, r24	; 51
	TIMSK0 |= (1<<TOIE0);
  3e:	89 b7       	in	r24, 0x39	; 57
  40:	82 60       	ori	r24, 0x02	; 2
  42:	89 bf       	out	0x39, r24	; 57
	TCNT0 = 255;
  44:	8f ef       	ldi	r24, 0xFF	; 255
  46:	82 bf       	out	0x32, r24	; 50
	OCR0A = 0;
  48:	16 be       	out	0x36, r1	; 54
  4a:	08 95       	ret

0000004c <__vector_3>:
}

ISR(TIM0_OVF_vect)
{
  4c:	1f 92       	push	r1
  4e:	0f 92       	push	r0
  50:	0f b6       	in	r0, 0x3f	; 63
  52:	0f 92       	push	r0
  54:	11 24       	eor	r1, r1
  56:	8f 93       	push	r24
	if (~PINB & (1<<BtnDwn)) MotPWM--;
  58:	b1 99       	sbic	0x16, 1	; 22
  5a:	03 c0       	rjmp	.+6      	; 0x62 <__vector_3+0x16>
  5c:	86 b7       	in	r24, 0x36	; 54
  5e:	81 50       	subi	r24, 0x01	; 1
  60:	86 bf       	out	0x36, r24	; 54
	if (~PINB & (1<<BtnUp)) MotPWM++;
  62:	b2 99       	sbic	0x16, 2	; 22
  64:	03 c0       	rjmp	.+6      	; 0x6c <__vector_3+0x20>
  66:	86 b7       	in	r24, 0x36	; 54
  68:	8f 5f       	subi	r24, 0xFF	; 255
  6a:	86 bf       	out	0x36, r24	; 54
}
  6c:	8f 91       	pop	r24
  6e:	0f 90       	pop	r0
  70:	0f be       	out	0x3f, r0	; 63
  72:	0f 90       	pop	r0
  74:	1f 90       	pop	r1
  76:	18 95       	reti

00000078 <_Z7adcReadv>:

uint8_t adcRead(void)
{
	uint8_t adc = 0;
	ADCSRA |= (1 << ADSC);
  78:	36 9a       	sbi	0x06, 6	; 6
	adc = ADCH;
  7a:	85 b1       	in	r24, 0x05	; 5
	return adc;
} 
  7c:	08 95       	ret

0000007e <_Z6wdt_Onv>:
void wdt_On(void)
{
	wdt_reset();
  7e:	a8 95       	wdr
	WDTCR |= (1<<WDCE) | (1<<WDE); //WDT Change Enabled, WDT enabled
  80:	81 b5       	in	r24, 0x21	; 33
  82:	88 61       	ori	r24, 0x18	; 24
  84:	81 bd       	out	0x21, r24	; 33
	WDTCR = (1<<WDE) | (1<<WDP2) | (1<<WDP1); // WDT prescaler (time-out) 1s
  86:	8e e0       	ldi	r24, 0x0E	; 14
  88:	81 bd       	out	0x21, r24	; 33
  8a:	08 95       	ret

0000008c <_Z7wdt_Offv>:
}

void wdt_Off(void)
{
	wdt_reset();
  8c:	a8 95       	wdr
	MCUSR &= ~(1<<WDRF);	
  8e:	84 b7       	in	r24, 0x34	; 52
  90:	87 7f       	andi	r24, 0xF7	; 247
  92:	84 bf       	out	0x34, r24	; 52
	WDTCR |= (1<<WDCE) | (1<<WDE);
  94:	81 b5       	in	r24, 0x21	; 33
  96:	88 61       	ori	r24, 0x18	; 24
  98:	81 bd       	out	0x21, r24	; 33
	WDTCR = 0;
  9a:	11 bc       	out	0x21, r1	; 33
  9c:	08 95       	ret

0000009e <main>:
}

int main(void)
{
	wdt_Off();
  9e:	f6 df       	rcall	.-20     	; 0x8c <_Z7wdt_Offv>
	portInit();
  a0:	c0 df       	rcall	.-128    	; 0x22 <_Z8portInitv>
	pwmInit();
  a2:	c9 df       	rcall	.-110    	; 0x36 <_Z7pwmInitv>
	wdt_On();
  a4:	ec df       	rcall	.-40     	; 0x7e <_Z6wdt_Onv>
    adcInit();
  a6:	c2 df       	rcall	.-124    	; 0x2c <_Z7adcInitv>
	sei();
  a8:	78 94       	sei

	while (1) 
    {
		if (~PINB & (1<<Jp1)) MotPWM = adcRead();		
		if (MotPWM>=254) MotPWM = 253;
  aa:	dd ef       	ldi	r29, 0xFD	; 253
		if (MotPWM <=0) MotPWM = 1;
  ac:	c1 e0       	ldi	r28, 0x01	; 1
    adcInit();
	sei();

	while (1) 
    {
		if (~PINB & (1<<Jp1)) MotPWM = adcRead();		
  ae:	b4 99       	sbic	0x16, 4	; 22
  b0:	02 c0       	rjmp	.+4      	; 0xb6 <__stack+0x17>
  b2:	e2 df       	rcall	.-60     	; 0x78 <_Z7adcReadv>
  b4:	86 bf       	out	0x36, r24	; 54
		if (MotPWM>=254) MotPWM = 253;
  b6:	86 b7       	in	r24, 0x36	; 54
  b8:	8e 3f       	cpi	r24, 0xFE	; 254
  ba:	08 f0       	brcs	.+2      	; 0xbe <__stack+0x1f>
  bc:	d6 bf       	out	0x36, r29	; 54
		if (MotPWM <=0) MotPWM = 1;
  be:	86 b7       	in	r24, 0x36	; 54
  c0:	81 11       	cpse	r24, r1
  c2:	01 c0       	rjmp	.+2      	; 0xc6 <__stack+0x27>
  c4:	c6 bf       	out	0x36, r28	; 54
		wdt_reset();
  c6:	a8 95       	wdr
	pwmInit();
	wdt_On();
    adcInit();
	sei();

	while (1) 
  c8:	f2 cf       	rjmp	.-28     	; 0xae <__stack+0xf>

000000ca <_exit>:
  ca:	f8 94       	cli

000000cc <__stop_program>:
  cc:	ff cf       	rjmp	.-2      	; 0xcc <__stop_program>
